fun map2(x:((int list->int)*int list list)):int list = 
    let f = fst x in
    match snd x with 
        [] -> []:int list | y::ys -> f(y) :: map2(f, ys) 

fun sum_aux(x:(int list * int)):int = 
    let list2 = fst x in
        match list2 with
        [] -> snd x
        | y::ys -> sum_aux(ys,(snd x)+y)

fun map_and_sum(x:(int list->int)*int list list):int = 
    let map_res = map2(x) in sum2(map_res)

fun sum2(x:int list):int = 
    sum_aux(x,0)

in let n = (sum2,[[1,2]:int list,[3,4]:int list]: int list list) in map_and_sum(n)